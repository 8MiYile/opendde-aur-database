package() {
  set -u
  cd "${_srcdir[${CARCH}]}"
  install -Dp "${srcdir}"/bios_*.txt *.txt *.[Rr][Oo][Mm] Linux*.sh afulnx_* 'ArchOpts' -t "${pkgdir}/usr/lib/${pkgname}/"
  cd "${pkgdir}/usr/lib/${pkgname}/"
  chmod 644 *.txt *.[Rr][Oo][Mm]
  chmod 744 *.sh afulnx*
  ln -s "${_sh[${CARCH}]}" 'Linux.sh'

  # Prebuilding the kernel module could work on distros with more consistent Linux kernel versions.
  # It runs dynamically just fine and all the fixups needed to detect kernel changes isn't worth it on Arch.
  if [ -s "${srcdir}/${_srcdir[${CARCH}]}/amifldrv_mod.o" ]; then
    cd "${srcdir}/${_srcdir[${CARCH}]}"
    install -pm644 'amifldrv_mod.o' -t "${pkgdir}/usr/lib/${pkgname}/"
    cd "${pkgdir}/usr/lib/${pkgname}/"
    local _arch="$(uname -r)"
    mv 'amifldrv_mod.o' "amifldrv_mod.o.${_arch}"
    ln -s "amifldrv_mod.o.${_arch}" 'amifldrv_mod.o'
    # To complete this we need to modify the shell scripts to recompile on kernel change and fix the installer to clean up afterwards.
  fi

  install -Dpm744 <(cat << EOF
#!/usr/bin/bash
# Automatically generated by ${pkgname}-${pkgver} PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

echo 'Please wait while AMI'
echo ' * compiles a kernel module with make & gcc'
echo ' * insmod'
echo 'runs AFULNX'
echo ' * rmmod'
echo ' * then finally deletes the kernel module file.'
rm -f 'OLDROM.ROM'
cp -p '/usr/lib/${pkgname}/ArchOpts' '/tmp/'
./${_exe[${CARCH}]} 'OLDROM.ROM' /O
if [ -s 'OLDROM.ROM' ]; then
  ls -l 'OLDROM.ROM'
  echo 'Arch Linux test passed!'
else
  echo 'Arch Linux test failed!'
fi
rm '/tmp/ArchOpts'
EOF
  ) "${pkgdir}/usr/lib/${pkgname}/romtest.sh"

  set +u
}
