prepare() {
  # amethyst builds, by default, in the "stable" configuration. This simple
  # patch changes this configuration to "release." This changes which compiler
  # optimisation features are enabled. In addition, amethyst expects its
  # configuration files (mimetypes.bml and settings.bml) to be within the
  # user's configuration directory (~/.config/amethyst). Because amethyst
  # cannot generate these files, and because packages cannot reliably change
  # the user's home directory, the prefix for the configuration files is
  # changed to /usr/share/amethyst. I also added the "relro" linker flag, as
  # per namcap's recommendation.
  patch -Np0 -d "${srcdir}" -i amethyst-release.patch

  # amethyst uses the hiro UI abstraction library also used in higan, bsnes
  # etc. hiro supports GTK+3, but with a significant problem - many (not all,
  # but some) of the theme colours specified in settings.bml are overridden by
  # any CSS theme you have installed on your system (Adwaita, Breeze, etc.).
  # All of the APIs that hiro uses to perform colour adjustment are from GTK+2,
  # and are now deprecated. The proper solution to this is to revamp hiro to
  # use CSS for colour theming rather than the outdated API. But this is
  # something that should be done in a fork of hiro so that the fix can be
  # pulled into higan and bsnes as well. So for now, I just comment out the
  # calls to hiro's setBackgroundColor() and setForegroundColor() functions,
  # so that all UI widgets just use the system CSS theme.
  patch -Np0 -d "${srcdir}" -i amethyst-disable-theme.patch

  # amethyst will refuse to draw anything on non-X11 windows. This
  # means that it cannot be run natively on Wayland desktops. This can be
  # woked around with XWayland, but the environment variable GDK_BACKEND=x11
  # needs to be set to force GTK+3 to use XWayland instead of creating a native
  # Wayland window. This patch changes the desktop entry to enforce this using
  # the env command.
  patch -Np0 -d "${srcdir}" -i amethyst-xwayland.patch

  # The original tarball release came with two empty directories (obj/ and
  # out/) which store the generated assets. These directories have to exist in
  # order for the build to actually succeed (you get weird dependency errors
  # otherwise). What I didn't realise when re-publishing amethyst is that you
  # cannot push empty directories to a Git repository, so these directories
  # are now missing. So we create them.
  mkdir -p amethyst/amethyst/obj
  mkdir -p amethyst/amethyst/out
}
