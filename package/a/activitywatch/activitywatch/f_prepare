prepare() {
    cd "$srcdir/$pkgname"

    git submodule init
    for submodule in aw-{core,client,qt,server,watcher-{afk,window}}; do
        git config submodule.$submodule.url "$srcdir/${submodule##*/}"
    done
    git submodule update

    git -C aw-qt submodule init
    git -C aw-server submodule init
    git -C aw-server-rust submodule init

    git -C aw-qt config submodule.media.url "$srcdir/media"
    git -C aw-server config submodule.aw-webui.url "$srcdir/aw-webui"
    git -C aw-server-rust config submodule.aw-webui.url "$srcdir/aw-webui"

    git -C aw-qt submodule update
    git -C aw-server submodule update
    git -C aw-server-rust submodule update

    git -C aw-server/aw-webui submodule init
    git -C aw-server-rust/aw-webui submodule init
    git -C aw-server/aw-webui config submodule.aw-client-js.url "$srcdir/aw-client-js"
    git -C aw-server-rust/aw-webui config submodule.aw-client-js.url "$srcdir/aw-client-js"
    git -C aw-server/aw-webui submodule update
    git -C aw-server-rust/aw-webui submodule update

    msg2 "Checking for new submodules..."

    # if this outputs anything, add them to the sources array and set them up like above.
    git submodule update --recursive

    for repo in aw-{core,client,qt,server,watcher-{afk,window}}; do
        pushd $repo
        dephell deps convert --from pyproject.toml --to setup.py
        popd
    done

    pushd aw-core
    sed -i "s/packages=\\['aw_core'\\]/packages=['aw_core', 'aw_datastore', 'aw_transform', 'aw_query']/" setup.py
    popd

}
