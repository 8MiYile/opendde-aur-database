prepare() {
    local -A submodule_paths=(
        [third_party/pixman]=pixman
        [third_party/simpleini]=simpleini
        [third_party/gtest]=gtest
        [third_party/libwebp]=libwebp
        [src/flic]=flic
        [third_party/freetype2]=freetype2
        [third_party/zlib]=zlib
        [third_party/libpng]=libpng
        [src/clip]=clip
        [src/observable]=observable
        [src/undo]=undo
        [laf]=laf
        [third_party/cmark]=cmark
        [third_party/harfbuzz]=harfbuzz
        [third_party/libarchive]=libarchive
        [third_party/json11]=json11
        [third_party/benchmark]=benchmark
        [third_party/giflib]=giflib
        [third_party/fmt]=fmt
        [third_party/tinyexpr]=tinyexpr
        [third_party/lua]=lua
        [src/tga]=tga
        [third_party/curl]=curl
        [third_party/IXWebSocket]=IXWebSocket)

    cd "${srcdir}/${_pkgname}"

    git submodule init
    local submodule
    for submodule in "${!submodule_paths[@]}"; do
        git config submodule.${submodule}.url "${srcdir}/${submodule_paths[$submodule]}"
    done
    git -c protocol.file.allow=always submodule update

    cd laf
    git submodule init
    git config submodule.third_party/stringencoders.url "${srcdir}/stringencoders"
    git config submodule.third_party/googletest.url "${srcdir}/googletest" # not required if LAF_WITH_TESTS=OFF
    git -c protocol.file.allow=always submodule update

    cd "${srcdir}/${_pkgname}"
    patch --strip=1 --input="${srcdir}/desktop.patch"
    mkdir -p build

    cd "${srcdir}/skia"
    python tools/git-sync-deps
}
